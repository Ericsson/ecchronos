package com.ericsson.bss.cassandra.ecchronos.application;

import java.io.*;
import java.nio.file.Paths;

public class EccYamlToMarkdownConverter
{
    public static void main(String[] args)
    {
        String relativePathToDocs = "docs/autogenerated";
        String markdownFileName = "EccYamlFile.md";
        String yamlFilePath = "/ecc.yml"; // Resource path in the classpath

        String currentWorkingDir = System.getProperty("user.dir");
        String markdownFilePath = Paths.get(currentWorkingDir, relativePathToDocs, markdownFileName).toString();

        try
        {
            convertYamlToMarkdown(yamlFilePath, markdownFilePath);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private static void convertYamlToMarkdown(String yamlFilePath, String markdownFilePath) throws IOException
    {
        try (InputStream inputStream = EccYamlToMarkdownConverter.class.getResourceAsStream(yamlFilePath);
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
             BufferedWriter writer = new BufferedWriter(new FileWriter(markdownFilePath)))
        {

            if (inputStream == null)
            {
                throw new FileNotFoundException("Resource not found: " + yamlFilePath);
            }

            boolean skipLicenseHeader = true; // Skip license header
            String line;
            while ((line = reader.readLine()) != null)
            {
                if (skipLicenseHeader && line.startsWith("#"))
                {
                    continue; // Skip license header lines
                }
                skipLicenseHeader = false;

                String markdownLine = convertLineToMarkdown(line);
                writer.write(markdownLine);
                writer.newLine();
            }
        }
    }

    private static String convertLineToMarkdown(String line)
    {
        String trimmedLine = line.trim();

        // Handle empty lines and separators
        if (trimmedLine.isEmpty() || trimmedLine.equals("---"))
        {
            return "";
        }

        // Convert comment lines to regular text (not bold)
        if (trimmedLine.startsWith("#"))
        {
            return trimmedLine.substring(1).trim();
        }

        // Bold section headers (e.g., "repair:" becomes "**repair:**")
        if (trimmedLine.endsWith(":") && !trimmedLine.contains(" "))
        {
            return "**" + trimmedLine + "**";
        }

        // Format key-value pairs (e.g., "host: localhost" becomes "* host: localhost*")
        if (trimmedLine.contains(": ") && !trimmedLine.startsWith(" "))
        {
            return "* " + trimmedLine;
        }

        return line;
    }
}
